// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumera√ß√£o que define os poss√≠veis "pap√©is" (roles) de um usu√°rio.
// Enums s√£o √∫teis para restringir os valores permitidos para um campo no banco de dados.
// Neste caso, um usu√°rio pode ser apenas "USER" ou "ADMIN".
enum Role {
  USER
  ADMIN
}

// Modelo que representa a entidade "User" no banco de dados.
// Este model faz parte da camada "Model" no padr√£o MVC.
model User { // cria a tabela chamada user
  // Campo "id": chave prim√°ria do tipo inteiro. (chave primaria √© um identificador √∫nico de cada registro (linha) dentro de uma tabela em um banco de dados relacional)
  // O valor √© gerado automaticamente e incrementado a cada novo registro.
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique // A anota√ß√£o @unique garante que o e-mail n√£o se repita entre diferentes usu√°rios.

  // Campo "role": define o papel do usu√°rio com base no enum "Role".
  // S√≥ √© poss√≠vel inserir os valores definidos no enum (USER ou ADMIN).
  // O valor padr√£o √© USER, caso nenhum valor seja fornecido na cria√ß√£o.
  role      Role      @default(USER)

  createdAt DateTime  @default(now()) // fun√ßao que salva a hora que o usuario foi criado 
  updatedAt DateTime  @updatedAt //Propriedade especial que automaticamente ja salva assim que o usuario for modificado
  post      Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  body      String
  subTitle  String?  @map("sub_Title")//no prisma todos ja come√ßam com obrigatorio, colocando a interroga√ßao ele vira opcional
  userId    Int
  author    User    @relation(fields: [userId], references: [id] ) // Author User = Em termos pr√°ticos: cada post pertence a um autor (usu√°rio).

  /*Essa anota√ß√£o define como essa rela√ß√£o ser√° mapeada no banco:

fields: [userId]:
Diz que o campo userId (presente neste modelo) ser√° a chave estrangeira (foreign key) que aponta para o autor do post.

references: [id]:
Diz que esse userId referencia o campo id do modelo User.

üí° Em resumo:
Essa linha cria uma rela√ß√£o de muitos-para-um:

Muitos Posts ‚Üí pertencem a um √∫nico User (autor).

Cada post tem um campo userId que aponta para o id do usu√°rio autor.*/

}